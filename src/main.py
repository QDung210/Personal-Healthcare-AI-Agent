import asyncio
import json
import re
from rag import search_medical_info
from appointment_booking import extract_information, update_appointment_info, appointment_info
from model import ROUTER_MODEL, ROUTER_TOKENIZER
from langchain.memory import ConversationBufferMemory


def route_task(user_input: str) -> str:
    """
    S·ª≠ d·ª•ng model function calling ƒë·ªÉ x√°c ƒë·ªãnh task: RAG ho·∫∑c BOOKING
    
    Returns:
        "rag" ho·∫∑c "booking"
    """
    prompt = f"""B·∫°n l√† m·ªôt AI Router. Ph√¢n t√≠ch c√¢u n√≥i c·ªßa ng∆∞·ªùi d√πng v√† x√°c ƒë·ªãnh task ph√π h·ª£p.

C√ì 2 TASK:
1. "rag" - T√¨m ki·∫øm th√¥ng tin y t·∫ø (tri·ªáu ch·ª©ng, b·ªánh, ƒëi·ªÅu tr·ªã, s·ª©c kh·ªèe)
2. "booking" - ƒê·∫∑t l·ªãch kh√°m b·ªánh (ƒë·∫∑t l·ªãch, book, h·∫πn kh√°m, th√¥ng tin b·ªánh nh√¢n)

QUAN TR·ªåNG:
- N·∫øu h·ªèi v·ªÅ tri·ªáu ch·ª©ng, b·ªánh l√Ω, s·ª©c kh·ªèe ‚Üí "rag"
- N·∫øu mu·ªën ƒë·∫∑t l·ªãch, cung c·∫•p th√¥ng tin c√° nh√¢n ‚Üí "booking"

V√ç D·ª§:
- "ho khan k√©o d√†i" ‚Üí {{"task": "rag"}}
- "ƒëau ƒë·∫ßu c√≥ nguy hi·ªÉm kh√¥ng" ‚Üí {{"task": "rag"}}
- "t√¥i mu·ªën ƒë·∫∑t l·ªãch kh√°m" ‚Üí {{"task": "booking"}}
- "t√™n t√¥i l√† Nguy·ªÖn VƒÉn A" ‚Üí {{"task": "booking"}}
- "t√¥i mu·ªën kh√°m v√†o ng√†y mai" ‚Üí {{"task": "booking"}}

Ng∆∞·ªùi d√πng: {user_input}

Tr·∫£ v·ªÅ JSON:
{{"task": "rag ho·∫∑c booking"}}

JSON:"""
    
    try:
        inputs = ROUTER_TOKENIZER(prompt, return_tensors="pt").to(ROUTER_MODEL.device)
        outputs = ROUTER_MODEL.generate(**inputs, max_new_tokens=50, temperature=0.1)
        text = ROUTER_TOKENIZER.decode(outputs[0], skip_special_tokens=True)
        
        # Extract JSON
        json_blocks = re.findall(r'\{[\s\S]*?\}', text)
        if json_blocks:
            result = json.loads(json_blocks[-1])
            task = result.get("task", "rag").lower()
            print(f"üîç [Router] Detected task: {task}")
            return task
    except Exception as e:
        print(f" Router error: {e}")
    
    # Fallback: detect t·ª´ kh√≥a
    if any(kw in user_input.lower() for kw in ["ƒë·∫∑t l·ªãch", "book", "h·∫πn", "t√™n t√¥i", "t√¥i t√™n"]):
        return "booking"
    return "rag"

async def chat_loop():
    print("ü§ñ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Tr·ª£ l√Ω Y t·∫ø AI!")
    print("üí¨ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:")
    print("   ‚Ä¢ T√¨m ki·∫øm th√¥ng tin y t·∫ø (tri·ªáu ch·ª©ng, b·ªánh l√Ω, ƒëi·ªÅu tr·ªã)")
    print("   ‚Ä¢ ƒê·∫∑t l·ªãch kh√°m b·ªánh")
    print("\nüìù G√µ 'exit' ƒë·ªÉ tho√°t")
    print("üìù G√µ 'xem l·ªãch' ƒë·ªÉ xem th√¥ng tin ƒë·∫∑t l·ªãch hi·ªán t·∫°i")
    print("üìù G√µ 'reset' ƒë·ªÉ ƒë·∫∑t l·ªãch m·ªõi")
    print("üìù G√µ 'xong' ho·∫∑c 'ho√†n t·∫•t' ƒë·ªÉ k·∫øt th√∫c ƒë·∫∑t l·ªãch\n")
    print("=" * 60)
    
    current_task = None  # Task hi·ªán t·∫°i: None, "rag", ho·∫∑c "booking"
    
    # Kh·ªüi t·∫°o memory ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
    memory = ConversationBufferMemory(
        memory_key="chat_history",
        return_messages=True,
        input_key="input",
        output_key="output"
    )
    
    while True:
        user_input = input("\nüë§ B·∫°n: ").strip()
        
        if user_input.lower() == "exit":
            print("\nC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•. Ch√∫c b·∫°n kh·ªèe m·∫°nh!")
            break
        
        if not user_input:
            continue
        

        if user_input.lower() == "xem l·ªãch":
            print(f"\nTh√¥ng tin ƒë·∫∑t l·ªãch hi·ªán t·∫°i:")
            print(f"   T√™n: {appointment_info.get('patient_name') or 'ch∆∞a c√≥'}")
            print(f"   Th·ªùi gian: {appointment_info.get('time') or 'ch∆∞a c√≥'}")
            print(f"   Lo·∫°i kh√°m: {appointment_info.get('appointment_type') or 'ch∆∞a c√≥'}")
            print(f"   B·ªánh vi·ªán: {appointment_info.get('hospital') or 'ch∆∞a c√≥'}")
            continue
        
        if user_input.lower() == "reset":
            for key in appointment_info.keys():
                appointment_info[key] = None
            current_task = None
            print("\nƒê√£ reset th√¥ng tin ƒë·∫∑t l·ªãch!")
            continue
        
        # Check n·∫øu user mu·ªën ho√†n t·∫•t booking
        if user_input.lower() in ["xong", "ho√†n t·∫•t", "ok", "ƒë·ªìng √Ω", "x√°c nh·∫≠n"]:
            if current_task == "booking":
                # Ki·ªÉm tra ƒë√£ ƒë·ªß th√¥ng tin ch∆∞a
                if appointment_info.get('patient_name') and appointment_info.get('time'):
                    print("\nƒê√£ ho√†n t·∫•t ƒë·∫∑t l·ªãch!")
                    print("Ph√≤ng kh√°m s·∫Ω li√™n h·ªá x√°c nh·∫≠n trong 24h. C·∫£m ∆°n b·∫°n!")
                    current_task = None  # Tho√°t kh·ªèi lu·ªìng booking
                else:
                    print("\nV·∫´n c√≤n thi·∫øu th√¥ng tin. Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß!")
            continue
        
        if current_task is None:
            current_task = route_task(user_input)
            print(f"üìç Ch·∫ø ƒë·ªô: {'T√¨m ki·∫øm y t·∫ø' if current_task == 'rag' else 'ƒê·∫∑t l·ªãch kh√°m'}")
        
        if current_task == "booking":
            try:
                # Extract th√¥ng tin t·ª´ c√¢u n√≥i
                json_text = extract_information(user_input)
                result = update_appointment_info(json_text)
                
                print(f"\nƒê√£ c·∫≠p nh·∫≠t th√¥ng tin:")
                if result.get('patient_name'):
                    print(f"   T√™n: {result['patient_name']}")
                if result.get('time'):
                    print(f"   Th·ªùi gian: {result['time']}")
                if result.get('appointment_type'):
                    print(f"   Lo·∫°i kh√°m: {result['appointment_type']}")
                if result.get('hospital'):
                    print(f"   B·ªánh vi·ªán: {result['hospital']}")
                
                # Check missing info
                missing = []
                if not result.get('patient_name'):
                    missing.append("t√™n b·ªánh nh√¢n")
                if not result.get('time'):
                    missing.append("th·ªùi gian kh√°m")
                
                if missing:
                    print(f"\n C√≤n thi·∫øu: {', '.join(missing)}")
                    print(" Vui l√≤ng cung c·∫•p th√™m th√¥ng tin")
                    print(" Ho·∫∑c g√µ 'xong' ƒë·ªÉ ho√†n t·∫•t (n·∫øu ƒë√£ ƒë·ªß)")
                else:
                    print("\n ƒê√£ ƒë·ªß th√¥ng tin!")
                    print("G√µ 'xong' ƒë·ªÉ x√°c nh·∫≠n, ho·∫∑c ti·∫øp t·ª•c c·∫≠p nh·∫≠t th√¥ng tin")
                
                # GI·ªÆ LU·ªíNG BOOKING - kh√¥ng t·ª± ƒë·ªông tho√°t
                
            except Exception as e:
                print(f"\n L·ªói khi x·ª≠ l√Ω ƒë·∫∑t l·ªãch: {e}")
        
        elif current_task == "rag":
            try:
                # L·∫•y l·ªãch s·ª≠ chat ƒë·ªÉ cung c·∫•p context
                chat_history = memory.load_memory_variables({}).get("chat_history", [])
                
                # Format l·ªãch s·ª≠ chat th√†nh text
                history_text = ""
                if chat_history:
                    for msg in chat_history[-4:]:  # Ch·ªâ l·∫•y 4 tin nh·∫Øn g·∫ßn nh·∫•t ƒë·ªÉ tr√°nh qu√° d√†i
                        role = "Ng∆∞·ªùi d√πng" if hasattr(msg, 'type') and msg.type == "human" else "Tr·ª£ l√Ω"
                        content = msg.content if hasattr(msg, 'content') else str(msg)
                        history_text += f"{role}: {content}\n"
                
                # G·ªçi RAG v·ªõi context t·ª´ l·ªãch s·ª≠
                result = await search_medical_info(user_input, chat_history=history_text)
                
                print(f"\nü§ñ Tr·ª£ l√Ω: {result.answer}")
                
                # L∆∞u v√†o memory
                memory.save_context(
                    {"input": user_input},
                    {"output": result.answer}
                )
                
                # Ch·ªâ hi·ªÉn th·ªã ngu·ªìn n·∫øu c√≥ v√† ƒë·ªô li√™n quan >= 0.6
                if result.sources and any(s.score and s.score >= 0.6 for s in result.sources):
                    print("\n" + "=" * 60)
                    print(" **Ngu·ªìn tham kh·∫£o:**")
                    for i, s in enumerate(result.sources, 1):
                        if s.score and s.score >= 0.6:  # Ch·ªâ hi·ªÉn th·ªã ngu·ªìn c√≥ ƒë·ªô li√™n quan cao
                            print(f"\n[{i}] {s.title}")
                            if s.url and s.url != "N/A":
                                print(f"     {s.url}")
                            if s.score:
                                print(f"     ƒê·ªô li√™n quan: {s.score}")
                            if s.snippet:
                                print(f"     {s.snippet[:150]}...")
                    print("=" * 60)
                
                # Sau khi tr·∫£ l·ªùi RAG, reset task ƒë·ªÉ c√≥ th·ªÉ nh·∫≠n task m·ªõi
                current_task = None
            
            except Exception as e:
                print(f"\n L·ªói: {e}")
                print("Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c h·ªèi c√°ch kh√°c.")
                current_task = None

if __name__ == "__main__":
    asyncio.run(chat_loop())
